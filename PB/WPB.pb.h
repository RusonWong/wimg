// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WPB.proto

#ifndef PROTOBUF_WPB_2eproto__INCLUDED
#define PROTOBUF_WPB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WPB_2eproto();
void protobuf_AssignDesc_WPB_2eproto();
void protobuf_ShutdownFile_WPB_2eproto();

class ReqGet;
class ReqSet;
class ReqResponse;

enum RspCode {
  REQ_FAILED = 0,
  REQ_SUCCESS = 1
};
bool RspCode_IsValid(int value);
const RspCode RspCode_MIN = REQ_FAILED;
const RspCode RspCode_MAX = REQ_SUCCESS;
const int RspCode_ARRAYSIZE = RspCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RspCode_descriptor();
inline const ::std::string& RspCode_Name(RspCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RspCode_descriptor(), value);
}
inline bool RspCode_Parse(
    const ::std::string& name, RspCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RspCode>(
    RspCode_descriptor(), name, value);
}
enum ErrCode {
  ERR_FILE_NOT_FOUND = 0,
  ERR_INVALID_PARAMS = 1
};
bool ErrCode_IsValid(int value);
const ErrCode ErrCode_MIN = ERR_FILE_NOT_FOUND;
const ErrCode ErrCode_MAX = ERR_INVALID_PARAMS;
const int ErrCode_ARRAYSIZE = ErrCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrCode_descriptor();
inline const ::std::string& ErrCode_Name(ErrCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrCode_descriptor(), value);
}
inline bool ErrCode_Parse(
    const ::std::string& name, ErrCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrCode>(
    ErrCode_descriptor(), name, value);
}
// ===================================================================

class ReqGet : public ::google::protobuf::Message {
 public:
  ReqGet();
  virtual ~ReqGet();

  ReqGet(const ReqGet& from);

  inline ReqGet& operator=(const ReqGet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGet& default_instance();

  void Swap(ReqGet* other);

  // implements Message ----------------------------------------------

  ReqGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGet& from);
  void MergeFrom(const ReqGet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string imageID = 1;
  inline bool has_imageid() const;
  inline void clear_imageid();
  static const int kImageIDFieldNumber = 1;
  inline const ::std::string& imageid() const;
  inline void set_imageid(const ::std::string& value);
  inline void set_imageid(const char* value);
  inline void set_imageid(const char* value, size_t size);
  inline ::std::string* mutable_imageid();
  inline ::std::string* release_imageid();
  inline void set_allocated_imageid(::std::string* imageid);

  // required int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ReqGet)
 private:
  inline void set_has_imageid();
  inline void clear_has_imageid();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* imageid_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WPB_2eproto();
  friend void protobuf_AssignDesc_WPB_2eproto();
  friend void protobuf_ShutdownFile_WPB_2eproto();

  void InitAsDefaultInstance();
  static ReqGet* default_instance_;
};
// -------------------------------------------------------------------

class ReqSet : public ::google::protobuf::Message {
 public:
  ReqSet();
  virtual ~ReqSet();

  ReqSet(const ReqSet& from);

  inline ReqSet& operator=(const ReqSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSet& default_instance();

  void Swap(ReqSet* other);

  // implements Message ----------------------------------------------

  ReqSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSet& from);
  void MergeFrom(const ReqSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string imageName = 1;
  inline bool has_imagename() const;
  inline void clear_imagename();
  static const int kImageNameFieldNumber = 1;
  inline const ::std::string& imagename() const;
  inline void set_imagename(const ::std::string& value);
  inline void set_imagename(const char* value);
  inline void set_imagename(const char* value, size_t size);
  inline ::std::string* mutable_imagename();
  inline ::std::string* release_imagename();
  inline void set_allocated_imagename(::std::string* imagename);

  // required string imageBuff = 2;
  inline bool has_imagebuff() const;
  inline void clear_imagebuff();
  static const int kImageBuffFieldNumber = 2;
  inline const ::std::string& imagebuff() const;
  inline void set_imagebuff(const ::std::string& value);
  inline void set_imagebuff(const char* value);
  inline void set_imagebuff(const char* value, size_t size);
  inline ::std::string* mutable_imagebuff();
  inline ::std::string* release_imagebuff();
  inline void set_allocated_imagebuff(::std::string* imagebuff);

  // @@protoc_insertion_point(class_scope:ReqSet)
 private:
  inline void set_has_imagename();
  inline void clear_has_imagename();
  inline void set_has_imagebuff();
  inline void clear_has_imagebuff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* imagename_;
  ::std::string* imagebuff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WPB_2eproto();
  friend void protobuf_AssignDesc_WPB_2eproto();
  friend void protobuf_ShutdownFile_WPB_2eproto();

  void InitAsDefaultInstance();
  static ReqSet* default_instance_;
};
// -------------------------------------------------------------------

class ReqResponse : public ::google::protobuf::Message {
 public:
  ReqResponse();
  virtual ~ReqResponse();

  ReqResponse(const ReqResponse& from);

  inline ReqResponse& operator=(const ReqResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqResponse& default_instance();

  void Swap(ReqResponse* other);

  // implements Message ----------------------------------------------

  ReqResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqResponse& from);
  void MergeFrom(const ReqResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RspCode rspCode = 1;
  inline bool has_rspcode() const;
  inline void clear_rspcode();
  static const int kRspCodeFieldNumber = 1;
  inline ::RspCode rspcode() const;
  inline void set_rspcode(::RspCode value);

  // optional .ErrCode errCode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  inline ::ErrCode errcode() const;
  inline void set_errcode(::ErrCode value);

  // optional string newname = 3;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 3;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // @@protoc_insertion_point(class_scope:ReqResponse)
 private:
  inline void set_has_rspcode();
  inline void clear_has_rspcode();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_newname();
  inline void clear_has_newname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rspcode_;
  int errcode_;
  ::std::string* newname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WPB_2eproto();
  friend void protobuf_AssignDesc_WPB_2eproto();
  friend void protobuf_ShutdownFile_WPB_2eproto();

  void InitAsDefaultInstance();
  static ReqResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqGet

// required string imageID = 1;
inline bool ReqGet::has_imageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGet::set_has_imageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGet::clear_has_imageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGet::clear_imageid() {
  if (imageid_ != &::google::protobuf::internal::kEmptyString) {
    imageid_->clear();
  }
  clear_has_imageid();
}
inline const ::std::string& ReqGet::imageid() const {
  return *imageid_;
}
inline void ReqGet::set_imageid(const ::std::string& value) {
  set_has_imageid();
  if (imageid_ == &::google::protobuf::internal::kEmptyString) {
    imageid_ = new ::std::string;
  }
  imageid_->assign(value);
}
inline void ReqGet::set_imageid(const char* value) {
  set_has_imageid();
  if (imageid_ == &::google::protobuf::internal::kEmptyString) {
    imageid_ = new ::std::string;
  }
  imageid_->assign(value);
}
inline void ReqGet::set_imageid(const char* value, size_t size) {
  set_has_imageid();
  if (imageid_ == &::google::protobuf::internal::kEmptyString) {
    imageid_ = new ::std::string;
  }
  imageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqGet::mutable_imageid() {
  set_has_imageid();
  if (imageid_ == &::google::protobuf::internal::kEmptyString) {
    imageid_ = new ::std::string;
  }
  return imageid_;
}
inline ::std::string* ReqGet::release_imageid() {
  clear_has_imageid();
  if (imageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageid_;
    imageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqGet::set_allocated_imageid(::std::string* imageid) {
  if (imageid_ != &::google::protobuf::internal::kEmptyString) {
    delete imageid_;
  }
  if (imageid) {
    set_has_imageid();
    imageid_ = imageid;
  } else {
    clear_has_imageid();
    imageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 width = 2;
inline bool ReqGet::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqGet::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqGet::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqGet::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ReqGet::width() const {
  return width_;
}
inline void ReqGet::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// required int32 height = 3;
inline bool ReqGet::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqGet::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqGet::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqGet::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ReqGet::height() const {
  return height_;
}
inline void ReqGet::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// ReqSet

// required string imageName = 1;
inline bool ReqSet::has_imagename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSet::set_has_imagename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSet::clear_has_imagename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSet::clear_imagename() {
  if (imagename_ != &::google::protobuf::internal::kEmptyString) {
    imagename_->clear();
  }
  clear_has_imagename();
}
inline const ::std::string& ReqSet::imagename() const {
  return *imagename_;
}
inline void ReqSet::set_imagename(const ::std::string& value) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(value);
}
inline void ReqSet::set_imagename(const char* value) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(value);
}
inline void ReqSet::set_imagename(const char* value, size_t size) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqSet::mutable_imagename() {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  return imagename_;
}
inline ::std::string* ReqSet::release_imagename() {
  clear_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagename_;
    imagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqSet::set_allocated_imagename(::std::string* imagename) {
  if (imagename_ != &::google::protobuf::internal::kEmptyString) {
    delete imagename_;
  }
  if (imagename) {
    set_has_imagename();
    imagename_ = imagename;
  } else {
    clear_has_imagename();
    imagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string imageBuff = 2;
inline bool ReqSet::has_imagebuff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSet::set_has_imagebuff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSet::clear_has_imagebuff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSet::clear_imagebuff() {
  if (imagebuff_ != &::google::protobuf::internal::kEmptyString) {
    imagebuff_->clear();
  }
  clear_has_imagebuff();
}
inline const ::std::string& ReqSet::imagebuff() const {
  return *imagebuff_;
}
inline void ReqSet::set_imagebuff(const ::std::string& value) {
  set_has_imagebuff();
  if (imagebuff_ == &::google::protobuf::internal::kEmptyString) {
    imagebuff_ = new ::std::string;
  }
  imagebuff_->assign(value);
}
inline void ReqSet::set_imagebuff(const char* value) {
  set_has_imagebuff();
  if (imagebuff_ == &::google::protobuf::internal::kEmptyString) {
    imagebuff_ = new ::std::string;
  }
  imagebuff_->assign(value);
}
inline void ReqSet::set_imagebuff(const char* value, size_t size) {
  set_has_imagebuff();
  if (imagebuff_ == &::google::protobuf::internal::kEmptyString) {
    imagebuff_ = new ::std::string;
  }
  imagebuff_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqSet::mutable_imagebuff() {
  set_has_imagebuff();
  if (imagebuff_ == &::google::protobuf::internal::kEmptyString) {
    imagebuff_ = new ::std::string;
  }
  return imagebuff_;
}
inline ::std::string* ReqSet::release_imagebuff() {
  clear_has_imagebuff();
  if (imagebuff_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagebuff_;
    imagebuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqSet::set_allocated_imagebuff(::std::string* imagebuff) {
  if (imagebuff_ != &::google::protobuf::internal::kEmptyString) {
    delete imagebuff_;
  }
  if (imagebuff) {
    set_has_imagebuff();
    imagebuff_ = imagebuff;
  } else {
    clear_has_imagebuff();
    imagebuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqResponse

// required .RspCode rspCode = 1;
inline bool ReqResponse::has_rspcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqResponse::set_has_rspcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqResponse::clear_has_rspcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqResponse::clear_rspcode() {
  rspcode_ = 0;
  clear_has_rspcode();
}
inline ::RspCode ReqResponse::rspcode() const {
  return static_cast< ::RspCode >(rspcode_);
}
inline void ReqResponse::set_rspcode(::RspCode value) {
  assert(::RspCode_IsValid(value));
  set_has_rspcode();
  rspcode_ = value;
}

// optional .ErrCode errCode = 2;
inline bool ReqResponse::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqResponse::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqResponse::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqResponse::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::ErrCode ReqResponse::errcode() const {
  return static_cast< ::ErrCode >(errcode_);
}
inline void ReqResponse::set_errcode(::ErrCode value) {
  assert(::ErrCode_IsValid(value));
  set_has_errcode();
  errcode_ = value;
}

// optional string newname = 3;
inline bool ReqResponse::has_newname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqResponse::set_has_newname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqResponse::clear_has_newname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqResponse::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& ReqResponse::newname() const {
  return *newname_;
}
inline void ReqResponse::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void ReqResponse::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void ReqResponse::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqResponse::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* ReqResponse::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqResponse::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RspCode>() {
  return ::RspCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ErrCode>() {
  return ::ErrCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WPB_2eproto__INCLUDED
